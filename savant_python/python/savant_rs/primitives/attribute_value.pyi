from enum import Enum
from typing import List, Optional

from savant_rs.primitives.geometry import Intersection, Point, PolygonalArea, BBox, RBBox

__all__ = [
    "AttributeValueType",
    "AttributeValue",
    "AttributeValueView",
]

class AttributeValueType(Enum):
    Bytes: ...
    String: ...
    StringList: ...
    Integer: ...
    IntegerList: ...
    Float: ...
    FloatList: ...
    Boolean: ...
    BooleanList: ...
    BBox: ...
    BBoxList: ...
    RBBox: ...
    RBBoxList: ...
    Point: ...
    PointList: ...
    Polygon: ...
    PolygonList: ...
    Intersection: ...
    TemporaryValue: ...
    None_: ...

class AttributeValue:
    confidence: Optional[float]

    def get_value_type(self) -> AttributeValueType: ...
    @classmethod
    def intersection(
        cls, intersection: Intersection, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def none(cls) -> "AttributeValue": ...
    @classmethod
    def temporary_python_object(
        cls, python_object: object, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def bytes_from_list(
        cls, dims: List[int], blob: List[int], confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def string(
        cls, string: str, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def strings(
        cls, strings: List[str], confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def integer(
        cls, integer: int, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def integers(
        cls, integers: List[int], confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def floats(
        cls, floats: List[float], confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def boolean(
        cls, boolean: bool, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def booleans(
        cls, booleans: List[bool], confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def bbox(
        cls, bbox: BBox, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def bboxes(
        cls, bboxes: List[BBox], confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def rbbox(
        cls, bbox: RBBox, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def rbboxes(
        cls, bboxes: List[RBBox], confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def point(
        cls, point: Point, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def points(
        cls, points: List[Point], confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def polygon(
        cls, polygon: PolygonalArea, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def polygons(
        cls, polygons: List[PolygonalArea], confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    def is_none(self) -> bool: ...
    def as_bytes(self) -> Optional[bytes]: ...
    def as_intersection(self) -> Optional[Intersection]: ...
    def as_string(self) -> Optional[str]: ...
    def as_strings(self) -> Optional[List[str]]: ...
    def as_temporary_python_object(self) -> Optional[object]: ...
    def as_integer(self) -> Optional[int]: ...
    def as_integers(self) -> Optional[List[int]]: ...
    def as_float(self) -> Optional[float]: ...
    def as_floats(self) -> Optional[List[float]]: ...
    def as_boolean(self) -> Optional[bool]: ...
    def as_booleans(self) -> Optional[List[bool]]: ...
    def as_bbox(self) -> Optional[BBox]: ...
    def as_bboxes(self) -> Optional[List[BBox]]: ...
    def as_rbbox(self) -> Optional[RBBox]: ...
    def as_rbboxes(self) -> Optional[List[RBBox]]: ...
    def as_point(self) -> Optional[Point]: ...
    def as_points(self) -> Optional[List[Point]]: ...
    def as_polygon(self) -> Optional[PolygonalArea]: ...
    def as_polygons(self) -> Optional[List[PolygonalArea]]: ...
    @classmethod
    def bytes(
        cls, dims: List[int], blob: bytes, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @classmethod
    def float(
        cls, float: float, confidence: Optional[float] = None
    ) -> "AttributeValue": ...
    @property
    def json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> "AttributeValue": ...

class AttributeValueView:
    def __getitem__(self, item): ...
    @property
    def memory_handle(self) -> int: ...
    def __len__(self) -> int: ...
