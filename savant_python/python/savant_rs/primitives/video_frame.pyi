from enum import Enum
from typing import Dict, List, Optional, Tuple

from savant_rs.draw_spec import SetDrawLabelKind
from savant_rs.match_query import MatchQuery
from savant_rs.primitives import *
from savant_rs.primitives.geometry import RBBox
from savant_rs.primitives.video_object import (BorrowedVideoObject,
                                               VideoObjectTree)
from savant_rs.utils import VideoObjectBBoxTransformation
from savant_rs.utils.serialization import Message

__all__ = [
    "ObjectUpdatePolicy",
    "ExternalFrame",
    "VideoFrameContent",
    "VideoFrameTranscodingMethod",
    "VideoFrameTransformation",
    "VideoFrame",
    "VideoFrameUpdate",
    "VideoFrameBatch",
]

class ObjectUpdatePolicy(Enum):
    AddForeignObjects: ...
    ErrorIfLabelsCollide: ...
    ReplaceSameLabelObjects: ...

class ExternalFrame:
    method: str
    location: Optional[str]

    def __init__(self, method: str, location: Optional[str]): ...
    @property
    def method(self) -> str: ...
    @method.setter
    def method(self, method: str): ...
    @property
    def location(self) -> Optional[str]: ...
    @location.setter
    def location(self, location: Optional[str]): ...

class VideoFrameContent:
    @classmethod
    def external(cls, method: str, location: Optional[str]) -> VideoFrameContent: ...
    @classmethod
    def internal(cls, data: bytes) -> VideoFrameContent: ...
    @classmethod
    def none(cls) -> VideoFrameContent: ...
    def is_external(self) -> bool: ...
    def is_internal(self) -> bool: ...
    def is_none(self) -> bool: ...
    def get_data(self) -> bytes: ...
    def get_method(self) -> str: ...
    def get_location(self) -> Optional[str]: ...

class VideoFrameTranscodingMethod(Enum):
    Copy: ...
    Encoded: ...

class VideoFrame:

    @classmethod
    def transform_geometry(
        cls, ops: List[VideoObjectBBoxTransformation], no_gil: bool = True
    ): ...
    @property
    def memory_handle(self) -> int: ...
    def __init__(
        self,
        source_id: str,
        framerate: str,
        width: int,
        height: int,
        content: VideoFrameContent,
        transcoding_method: VideoFrameTranscodingMethod = VideoFrameTranscodingMethod.Copy,
        codec: Optional[str] = None,
        keyframe: Optional[bool] = None,
        time_base: Tuple[int, int] = (1, 1000000),
        pts: int = 0,
        dts: Optional[int] = None,
        duration: Optional[int] = None,
    ): ...
    def to_message(self) -> Message: ...
    @property
    def source_id(self) -> str: ...
    @source_id.setter
    def source_id(self, source_id: str): ...
    @property
    def time_base(self) -> Tuple[int, int]: ...
    @time_base.setter
    def time_base(self, time_base: Tuple[int, int]): ...
    @property
    def pts(self) -> int: ...
    @pts.setter
    def pts(self, pts: int): ...
    @property
    def uuid(self) -> str: ...
    @property
    def creation_timestamp_ns(self) -> int: ...
    @creation_timestamp_ns.setter
    def creation_timestamp_ns(self, timestamp: int): ...
    @property
    def framerate(self) -> str: ...
    @framerate.setter
    def framerate(self, framerate: str): ...
    @property
    def width(self) -> int: ...
    @width.setter
    def width(self, width: int): ...
    @property
    def height(self) -> int: ...
    @height.setter
    def height(self, height: int): ...
    @property
    def dts(self) -> Optional[int]: ...
    @dts.setter
    def dts(self, dts: Optional[int]): ...
    @property
    def duration(self) -> Optional[int]: ...
    @duration.setter
    def duration(self, duration: Optional[int]): ...
    @property
    def transcoding_method(self) -> VideoFrameTranscodingMethod: ...
    @transcoding_method.setter
    def transcoding_method(self, transcoding_method: VideoFrameTranscodingMethod): ...
    @property
    def codec(self) -> Optional[str]: ...
    @codec.setter
    def codec(self, codec: Optional[str]): ...
    @property
    def keyframe(self) -> Optional[bool]: ...
    @keyframe.setter
    def keyframe(self, keyframe: Optional[bool]): ...
    @property
    def content(self) -> VideoFrameContent: ...
    @content.setter
    def content(self, content: VideoFrameContent): ...
    @property
    def previous_frame_seq_id(self) -> Optional[int]: ...
    @property
    def previous_keyframe_uuid(self) -> Optional[str]: ...
    @property
    def json(self) -> str: ...
    @property
    def json_pretty(self) -> str: ...
    def clear_transformations(self): ...
    def add_transformation(self, transformation: VideoFrameTransformation): ...
    @property
    def transformations(self) -> List[VideoFrameTransformation]: ...
    @property
    def attributes(self) -> List[Tuple[str, str]]: ...
    def get_attribute(self, namespace: str, name: str) -> Optional[Attribute]: ...
    def find_attributes_with_ns(self, namespace: str) -> List[Tuple[str, str]]: ...
    def find_attributes_with_names(self, names: List[str]) -> List[Tuple[str, str]]: ...
    def find_attributes_with_hints(
        self, hints: List[Optional[str]]
    ) -> List[Tuple[str, str]]: ...
    def delete_attribute(self, namespace: str, name: str) -> Optional[Attribute]: ...
    def clear_attributes(self): ...
    def delete_attributes_with_ns(self, namespace: str): ...
    def delete_attributes_with_names(self, names: List[str]): ...
    def delete_attributes_with_hints(self, hints: List[Optional[str]]): ...
    def set_attribute(self, attribute: Attribute) -> Optional[Attribute]: ...
    def set_persistent_attribute(
        self,
        namespace: str,
        name: str,
        is_hidden: bool = False,
        hint: Optional[str] = None,
        values: Optional[List[AttributeValue]] = None,
    ): ...
    def set_temporary_attribute(
        self,
        namespace: str,
        name: str,
        is_hidden: bool = False,
        hint: Optional[str] = None,
        values: Optional[List[AttributeValue]] = None,
    ): ...
    def set_draw_label(
        self, q: MatchQuery, draw_label: SetDrawLabelKind, no_gil: bool = False
    ): ...
    def add_object(
        self, object: "VideoObject", policy: IdCollisionResolutionPolicy
    ) -> BorrowedVideoObject: ...
    def create_object(
        self,
        namespace: str,
        label: str,
        parent_id: Optional[int] = None,
        confidence: Optional[float] = None,
        detection_box: Optional[RBBox] = None,
        track_id: Optional[int] = None,
        track_box: Optional[RBBox] = None,
        attributes: Optional[List[Attribute]] = None,
    ) -> BorrowedVideoObject: ...
    def get_object(self, id: int) -> Optional[BorrowedVideoObject]: ...
    def get_all_objects(self) -> VideoObjectsView: ...
    def has_objects(self) -> bool: ...
    def access_objects(self, q: MatchQuery, no_gil: bool = True) -> VideoObjectsView: ...
    def access_objects_with_ids(self, ids: List[int]) -> VideoObjectsView: ...
    def delete_objects(self, q: MatchQuery, no_gil: bool = True) -> List["VideoObject"]: ...
    def delete_objects_with_ids(self, ids: List[int]) -> List["VideoObject"]: ...
    def export_complete_object_trees(
        self, q: MatchQuery, delete_exported: bool
    ) -> List[VideoObjectTree]: ...
    def import_object_trees(self, trees: List[VideoObjectTree]) -> None: ...
    def set_parent(
        self, q: MatchQuery, parent: BorrowedVideoObject, no_gil: bool = True
    ) -> VideoObjectsView: ...
    def set_parent_by_id(self, object_id: int, parent_id: int) -> None: ...
    def clear_parent(self, q: MatchQuery, no_gil: bool = True) -> VideoObjectsView: ...
    def clear_objects(self): ...
    def get_children(self, id: int) -> VideoObjectsView: ...
    def copy(self, no_gil: bool = True) -> VideoFrame: ...
    def update(self, update: VideoFrameUpdate, no_gil: bool = True) -> None: ...
    def to_protobuf(self, no_gil: bool = True) -> bytes: ...
    @classmethod
    def from_protobuf(cls, bytes: bytes, no_gil: bool = True) -> VideoFrame: ...

class VideoFrameUpdate:
    frame_attribute_policy: AttributeUpdatePolicy
    object_attribute_policy: AttributeUpdatePolicy
    object_policy: ObjectUpdatePolicy

    def __init__(self): ...
    def add_frame_attribute(self, attribute: Attribute): ...
    def add_object_attribute(self, object_id: int, attribute: Attribute): ...
    def add_object(self, object: VideoObject, parent_id: Optional[int]): ...
    def get_objects(self) -> List[Tuple[VideoObject, Optional[int]]]: ...
    @property
    def json(self) -> str: ...
    @property
    def json_pretty(self) -> str: ...
    def to_protobuf(self, no_gil: bool = True) -> bytes: ...
    @classmethod
    def from_protobuf(
        cls, protobuf: bytes, no_gil: bool = True
    ) -> VideoFrameUpdate: ...

class VideoFrameTransformation:
    @staticmethod
    def initial_size(width: int, height: int) -> VideoFrameTransformation: ...
    @staticmethod
    def scale(width: int, height: int) -> VideoFrameTransformation: ...
    @staticmethod
    def padding(
        left: int, top: int, right: int, bottom: int
    ) -> VideoFrameTransformation: ...
    @staticmethod
    def resulting_size(width: int, height: int) -> VideoFrameTransformation: ...
    @property
    def is_initial_size(self) -> bool: ...
    @property
    def is_scale(self) -> bool: ...
    @property
    def is_padding(self) -> bool: ...
    @property
    def is_resulting_size(self) -> bool: ...
    @property
    def as_initial_size(self) -> Optional[Tuple[int, int]]: ...
    @property
    def as_scale(self) -> Optional[Tuple[int, int]]: ...
    @property
    def as_padding(self) -> Optional[Tuple[int, int, int, int]]: ...
    @property
    def as_resulting_size(self) -> Optional[Tuple[int, int]]: ...

class VideoFrameBatch:
    """A batch of video frames that can be processed together."""

    @property
    def frames(self) -> Dict[int, VideoFrame]:
        """Get all frames in the batch.

        Returns
        -------
        Dict[int, VideoFrame]
            Dictionary mapping frame IDs to VideoFrame objects
        """
        ...

    @property
    def frame_ids(self) -> List[int]:
        """Get IDs of all frames in the batch.

        Returns
        -------
        List[int]
            List of frame IDs in the batch
        """
        ...

    def add_frame(self, frame: VideoFrame) -> int:
        """Add a frame to the batch.

        Parameters
        ----------
        frame : VideoFrame
            The frame to add

        Returns
        -------
        int
            ID assigned to the frame in the batch
        """
        ...

    def get_frame(self, frame_id: int) -> Optional[VideoFrame]:
        """Get a frame from the batch by its ID.

        Parameters
        ----------
        frame_id : int
            ID of the frame to retrieve

        Returns
        -------
        Optional[VideoFrame]
            The frame if found, None otherwise
        """
        ...

    def to_message(self) -> Message:
        """Convert the batch to a message for serialization.

        Returns
        -------
        Message
            Message containing the batch data
        """
        ...

    @classmethod
    def from_frames(cls, frames: List[VideoFrame]) -> VideoFrameBatch:
        """Create a new batch from a list of frames.

        Parameters
        ----------
        frames : List[VideoFrame]
            List of frames to include in the batch

        Returns
        -------
        VideoFrameBatch
            New batch containing the provided frames
        """
        ...

    def add(self, id: int, frame: VideoFrame): ...
    def get(self, id: int) -> Optional[VideoFrame]: ...
    def del_(self, id: int) -> Optional[VideoFrame]: ...
    def access_objects(self, q: MatchQuery, no_gil: bool = True) -> Dict[int, VideoObjectsView]: ...
    def delete_objects(self, q: MatchQuery, no_gil: bool = True) -> Dict[int, List["VideoObject"]]: ...
