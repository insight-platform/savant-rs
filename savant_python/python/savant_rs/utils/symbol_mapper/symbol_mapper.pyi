from enum import Enum
from typing import Dict, List, Optional, Tuple

__all__ = [
    'RegistrationPolicy',
    'build_model_object_key',
    'clear_symbol_maps',
    'dump_registry',
    'get_model_id',
    'get_model_name',
    'get_object_id',
    'get_object_ids',
    'get_object_label',
    'get_object_labels',
    'is_model_registered',
    'is_object_registered',
    'parse_compound_key',
    'register_model_objects',
    'validate_base_key',
]

class RegistrationPolicy(Enum):
    Override: ...
    ErrorIfNonUnique: ...

def build_model_object_key(model_name: str, object_label: str) -> str: ...
def clear_symbol_maps() -> None: ...
def dump_registry() -> str: ...
def get_model_id(model_name: str) -> int: ...
def get_model_name(model_id: int) -> Optional[str]: ...
def get_object_id(model_name: str, object_label: str) -> Tuple[int, int]: ...
def get_object_ids(model_name: str, object_labels: List[str]) -> List[Tuple[str, Optional[int]]]: ...
def get_object_label(model_id: int, object_id: int) -> Optional[str]: ...
def get_object_labels(model_id: int, object_ids: List[int]) -> List[Tuple[int, Optional[str]]]: ...
def is_model_registered(model_name: str) -> bool: ...
def is_object_registered(model_name: str, object_label: str) -> bool: ...
def parse_compound_key(key: str) -> Tuple[str, str]: ...
def register_model_objects(model_name: str, elements: Dict[int, str], policy: RegistrationPolicy) -> int: ...
def validate_base_key(key: str) -> str: ... 