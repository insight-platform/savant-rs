from typing import Dict, List, Optional, Tuple

from savant_rs.primitives import VideoObjectsView
from savant_rs.primitives.geometry import RBBox
from savant_rs.utils import BBoxMetricType

class FloatExpression:
    @classmethod
    def eq(cls, arg: float) -> FloatExpression: ...
    @classmethod
    def ne(cls, arg: float) -> FloatExpression: ...
    @classmethod
    def gt(cls, arg: float) -> FloatExpression: ...
    @classmethod
    def ge(cls, arg: float) -> FloatExpression: ...
    @classmethod
    def lt(cls, arg: float) -> FloatExpression: ...
    @classmethod
    def le(cls, arg: float) -> FloatExpression: ...
    @classmethod
    def between(cls, arg1: float, arg2: float) -> FloatExpression: ...
    @classmethod
    def one_of(cls, *args: float) -> FloatExpression: ...

class IntExpression:
    @classmethod
    def eq(cls, arg: int) -> IntExpression: ...
    @classmethod
    def ne(cls, arg: int) -> IntExpression: ...
    @classmethod
    def gt(cls, arg: int) -> IntExpression: ...
    @classmethod
    def ge(cls, arg: int) -> IntExpression: ...
    @classmethod
    def lt(cls, arg: int) -> IntExpression: ...
    @classmethod
    def le(cls, arg: int) -> IntExpression: ...
    @classmethod
    def between(cls, arg1: int, arg2: int) -> IntExpression: ...
    @classmethod
    def one_of(cls, *args: int) -> IntExpression: ...

class StringExpression:
    @classmethod
    def eq(cls, arg: str) -> StringExpression: ...
    @classmethod
    def ne(cls, arg: str) -> StringExpression: ...
    @classmethod
    def contains(cls, arg: str) -> StringExpression: ...
    @classmethod
    def not_contains(cls, arg: str) -> StringExpression: ...
    @classmethod
    def starts_with(cls, arg: str) -> StringExpression: ...
    @classmethod
    def ends_with(cls, arg: str) -> StringExpression: ...
    @classmethod
    def one_of(cls, *args: str) -> StringExpression: ...

class MatchQuery:
    @classmethod
    def and_(cls, *args: MatchQuery) -> MatchQuery: ...
    @classmethod
    def or_(cls, *args: MatchQuery) -> MatchQuery: ...
    @classmethod
    def not_(cls, arg: MatchQuery) -> MatchQuery: ...
    @classmethod
    def stop_if_false(cls, arg: MatchQuery) -> MatchQuery: ...
    @classmethod
    def stop_if_true(cls, arg: MatchQuery) -> MatchQuery: ...
    @classmethod
    def with_children(cls, *args: MatchQuery, e: IntExpression) -> MatchQuery: ...
    @classmethod
    def eval(cls, expr: str) -> MatchQuery: ...
    @classmethod
    def id(cls, e: IntExpression) -> MatchQuery: ...
    @classmethod
    def box_metric(
        cls, bbox: RBBox, metric_type: BBoxMetricType, e: FloatExpression
    ) -> MatchQuery: ...
    @classmethod
    def track_box_metric(
        cls, bbox: RBBox, metric_type: BBoxMetricType, e: FloatExpression
    ) -> MatchQuery: ...
    @classmethod
    def namespace(cls, e: StringExpression) -> MatchQuery: ...
    @classmethod
    def label(cls, e: StringExpression) -> MatchQuery: ...
    @classmethod
    def confidence(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def track_id(cls, e: IntExpression) -> MatchQuery: ...
    @classmethod
    def track_box_x_center(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def track_box_y_center(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def track_box_width(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def track_box_height(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def track_box_area(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def track_box_width_to_height_ratio(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def track_box_angle(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def parent_id(cls, e: IntExpression) -> MatchQuery: ...
    @classmethod
    def parent_namespace(cls, e: StringExpression) -> MatchQuery: ...
    @classmethod
    def parent_label(cls, e: StringExpression) -> MatchQuery: ...
    @classmethod
    def box_x_center(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def box_y_center(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def box_width(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def box_height(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def box_area(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def box_width_to_height_ratio(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def box_angle(cls, e: FloatExpression) -> MatchQuery: ...
    @classmethod
    def idle(cls) -> MatchQuery: ...
    @classmethod
    def attributes_jmes_query(cls, query: str) -> MatchQuery: ...
    @classmethod
    def parent_defined(cls) -> MatchQuery: ...
    @classmethod
    def confidence_defined(cls) -> MatchQuery: ...
    @classmethod
    def track_id_defined(cls) -> MatchQuery: ...
    @classmethod
    def box_angle_defined(cls) -> MatchQuery: ...
    @classmethod
    def track_box_angle_defined(cls) -> MatchQuery: ...
    @classmethod
    def attributes_empty(cls) -> MatchQuery: ...
    @classmethod
    def attribute_defined(cls, namespace: str, label: str) -> MatchQuery: ...
    @classmethod
    def frame_source_id(cls, e: StringExpression) -> MatchQuery: ...
    @classmethod
    def frame_is_key_frame(cls) -> MatchQuery: ...
    @classmethod
    def frame_width(cls, e: IntExpression) -> MatchQuery: ...
    @classmethod
    def frame_height(cls, e: IntExpression) -> MatchQuery: ...
    @classmethod
    def frame_no_video(cls) -> MatchQuery: ...
    @classmethod
    def frame_transcoding_is_copy(cls) -> MatchQuery: ...
    @classmethod
    def frame_attribute_exists(cls, namespace: str, label: str) -> MatchQuery: ...
    @classmethod
    def frame_attributes_empty(cls) -> MatchQuery: ...
    @classmethod
    def frame_attributes_jmes_query(cls, query: str) -> MatchQuery: ...
    @property
    def json(self) -> str: ...
    @property
    def json_pretty(self) -> str: ...
    @property
    def yaml(self) -> str: ...
    @classmethod
    def from_json(cls, json_str: str) -> MatchQuery: ...
    @classmethod
    def from_yaml(cls, yaml_str: str) -> MatchQuery: ...

class TlsConfig:
    def __init__(self, ca: str, cert: str, key: str): ...

class EtcdCredentials:
    def __init__(self, username: str, password: str): ...

def utility_resolver_name() -> str: ...
def etcd_resolver_name() -> str: ...
def env_resolver_name() -> str: ...
def config_resolver_name() -> str: ...
def register_utility_resolver(): ...
def register_env_resolver(): ...
def register_etcd_resolver(
    hosts: List[str],
    credentials: Optional[EtcdCredentials] = None,
    tls_config: Optional[TlsConfig] = None,
    watch_path: str = "savant",
    connect_timeout: int = 5,
    watch_path_wait_timeout: int = 5,
): ...
def register_config_resolver(params: Dict[str, str]): ...
def update_config_resolver(params: Dict[str, str]): ...
def unregister_resolver(name: str): ...

class QueryFunctions:
    @classmethod
    def filter(
        cls, v: VideoObjectsView, q: MatchQuery, no_gil: bool = True
    ) -> VideoObjectsView: ...
    @classmethod
    def partition(
        cls, v: VideoObjectsView, q: MatchQuery, no_gil: bool = True
    ) -> Tuple[VideoObjectsView, VideoObjectsView]: ...
